
Start Presentazione

  ***********************
TOLGO AUTOPLAY AL LETTORE VIDEO
  ***********************

ZACK

SLIDE: METODI DI ORDINE ELEVATO

Buongiorno a tutti,
oggi parleremo dei metodi ODE di ordine elevato

SLIDE:DOVE SIAMO ARRIVATI
Bene, a lezione abbiamo introdotto due metodi numerici, il metodo di Eulero e del metodo dei trapezi
Il metodo di Eulero è il più basilare dei metodi espliciti per l'integrazione numerica di equazioni differenziali ordinarie,
date le condizioni iniziali
In questa presentazione vorremmo analizzare innanzi tutto i limiti di tali metodi
e presentare altri metodi che ne rappresentano un miglioramento
proviamo a vedere subito come si comporta il metodo di Eulero nella risoluzione di un equazione differenziale

SLIDE: OSCILLATORE DI VAN DER POL
come esempio scegliamo
L'oscillatore di Van der Pol
che è un tipo di oscillatore non conservativo con attenuazione non lineare.
Questo sistema evolve nel tempo seguendo un equazione differenziale del secondo ordine

SLIDE: OSCILLATORE DI VAN DER POL - SOLUZIONE
Abbiamo scelto proprio questo esempio perchè per l'oscillatore di Van Der Pol ci è nota una soluzione analitica
Questa ci servirà per capire se il metodo numerico che andiamo a testare sta operando in maniera corretta
possiamo vedere in figura la soluzione analitica nel range di tempo da 0 PI GRECO secondi
e condizioni iniziali nulle per posizione e velocità di oscillazione

SLIDE: EULERO - TEST
Quindi inizialmo a testare il metodo di Eulero Esplicito con 25 passi equispaziati
e possiamo vedere nei due grafici in basso una stima dell'errore che commette il metodo ad ogni passo
nelle due componenti della soluzione,
che varia in un range tra circa [0.1 -0.4]

SLIDE: EULERO - TEST
aumentando il numero di passi del doppio, quindi a 50 passi,
possiamo vedere che la soluzione esatta
e quella stimata dal metodo
si avvicinano leggermente di più
e il range dell'errore si dimezza

SLIDE: EULERO - TEST
e analogamente il range si dimezza ulteriormente raddoppiando il numero di passi.
quindi arrivando a 100 passi

SLIDE: OBIETTIVO
notiamo quindi come ci sia una correlazione stretta tra l'aumento del numero di passi
e l'errore commesso dal metodo numerico

ma adesso la domanda che ci facciamo è un'altra, ovvero
a parità di numero dei passi è possibile raggiungere un'ordine di accuratezza superiore nei metodi ad un passo?

la risposta è SI
e per farlo bisogna aumentare l'ordine del metodo Stesso

ricordiamo che l'ordine Q di un metodo è legato all'errore di troncamento come O-piccolo
dell'incremeto h, elevato alla Q
vediamo Come

SLIDE: METODI DI ORDINE ELEVATO

Per introdurre i metodi di ordine elevato partiamo analizzando i metodi ad un passo
ogni metodo ad un passo si può scrivere in questa forma più generale dove
il passo successivo u_n+1
si valuta sommando al passo precendente u_n l'incremeto H
moltiplicato ad una particolare funzione FI
che prenderà quindi il nome di FUNZIONE INCREMENTO

Da notare che tutti i metodi che abbiamo visto fin ora siano scrivibili in questa forma
solo modificando per ogni metodo il rispettivo FI
I due metodi di Eulero sono di ordine 1 e FI contiene un'unica valutazione della FUNZIONE
mentre Cranck-Nicolson ha ordine 2 e FI contiene due valutazioni della FUNZIONE.

Si può dimostrare che estendendo il numero di valutazioni della funzione F all'interno della FUNZIONE INCREMENTO
si possano costruire metodi di ordine superiore in modo da approssimare meglio l'integrale

Una particolare categoria di metodi detti di RUNGHE-KUTTA infatti
valutano la funzione, s volte, all'interno di ogni passo
generando un coefficente K per ogni valutazione
dopo di che la somma pesata dei coefficenti K tramite dei particolari pesi B
va a costituire l'effettiva FUNZIONE INCREMENTO

si possono costruitre diversi metodi RUNGHE-KUTTA
variando il peso dei coefficenti B
o il numero S che rappresenta gli STADI del metodo

SLIDE: RK4 -TEST
Sempre con l'esempio dell'oscillatore utilizzando una funzione RUNGHE-KUTTA del quarto ordine a 4 stadi

sempre utilizzando 100 passi come l'esempio precedente
vediamo che l'errore è ridotto drasticamente a 10 alla meno 8
mentre in Eulero, alle stesse condizioni, l'errore era circa 10 alla 6 volte più grande

Bene, lascio la Parola a Samuele che ci spiegherà più in dettaglio i metodi RK


SAMUDONZO


SLIDE 1: METODO RK
I metodi di Runge-Kutta sono metodi a un passo che richiedono differenti
valutazioni della funzione f(t,y) in ciascun intervallo di [t_n, t_n+1].
In particolare è possibile esprimere u_n+1 secondo la prima formula riportata qua sotto,
dove i termine Ki sono le approssimazioni
delle derivate della funzione incognita in punti intermedi dell'intervallo di
integrazione.

Questi K, detti anche "stadi del metodo", sono definiti dall'espressione
riportata dalla seconda formula.
Dunque è possibile riscontrare una dipendenza dell'espressione generale di questi
metodi dai coefficienti a_ij, bi, ci.

SLIDE 2: TABLEAU
I coefficienti a_ij, bi, ci  giocano un ruolo fondamentale perchè rappresentano, determinano
il singolo metodo di Runge-Kutta. Questi coefficienti possono essere accorpati all'interno
di una tabella che prende il nome di Tableau di Butcher per facilitare la visualizzazione
del metodo.

In figura è mostrata la disposizione di tali coefficienti all'interno del Tableau: come si vede
nella colonna a sinistra sono disposti i coefficienti ci, al centro i coefficienti aij compongono
la matrice A che nei metodi da noi analizzati sarà sempre triangolare inferiore, in quanto
tratteremo sempre metodi espliciti, nella riga più inferiore i coefficienti bi.

I metodi Rk più utilizzati sono di tipo esplicito.
Ricordiamo che nei metodi ESPLICITI la soluzione numerica u_n+1 dipende esclusivamente
dai valore precedentemente calcolati.
Questo metodo è meno costoso poichè sfrutta in maniera più
intelligente le informazioni sulle derivate della funzione nello stesso
passo d'integrazione. Come vedremo in seguito, nei metodi RK espliciti i
generici stadi Ki vengono determinati in funzione degli stadi precedenti.



SLIDE3: ESEMPIO ORDINE 4
Dunque per definire ogni singolo metodo occorre costruire il suo
corrispondente Tableau per rappresentarlo in forma compatta.

Un famoso metodo di Runge-Kutta è quello del quarto ordine,
Utilizzando questo importante esempio è possibile spiegare meglio 2 concetti:


SLIDE4:STADI METODO
in primis gli stadi del metodo, ossia come interagiscono i vari coefficienti nel determinare
l'espressione degli stadi Ki, e come si determina la soluzione numerica.
Infatti U_n+1, cioè l'approssimazione allo step successivo, è definito come u_n più una combinazione lineare di
4 incrementi K1,K2,K3,k4 moltiplicati per i rispettivi coefficienti bi, in questo caso 1/6,1/3,1/3,1/6.
Come anticipato in precedenza, i termini Ki rappresentazione il calcolo della derivata in punti precisi
all'interno del passo di integrazione, e quindi corrispondono a una stima della pendenza di f,
la funzione incognita.
Ad esempio:
K1 è una valutazione della funzione f all'inizio dell'intervallo, quindi in t_n.
K2 è un valutazione di f a metà dell'intervallo, infatti come si può notare il coefficiente c2
che va a moltiplicare il passo è pari a 1/2, mentre a un viene sommato h moltiplicato per il prodotto di
a12 (sempre pari a 1/2) e K1.
Stesso ragionamento si può fare per lo stadio K3, in quanto abbiamo c3 pari 1/2, a32 pari 1/2
va a moltiplicare K2.
Infine l'ultimo stadio K4 viene valutato in tn+1, infatti c4 è pari a 1, mentre a un e a43 moltiplica K4 per 1.


SLIDE 5: CONSISTENZA
L'esempio fornito inoltre ci mostra l'utilità del Tableau di
Butcher.
E poi permette di verificare "a occhio" alcune proprietà che possono essere
un po' macchinose, limitandomi a fare semplicemente una somma per righe o
per colonne.

-Un esempio di questa applicazione è il riconoscimento della proprietà
di CONSISTENZA, derivanta dalla sommatoria dei
coeff. b_i, per i da 1 a s =1.


MICHELE

SLIDE 1

Passiamo ora ad introdurre un esempio di un metodo di Runge Kutta
Il metodo di Heun è un metodo di Runge-Kutta del secondo ordine,
questo metodo è composto da due diverse equazioni che
agiscono una dopo l'altra:
-prima si utilizza l’equazione del predittore, che fornisce una prima
approssimazione del punto successivo della soluzione, il punto un+1
-dopo aver fatto ciò il valore calcolato viene fornito all’equazione
del correttore, la quale fornisce un’approssimazione più accurata
e precisa del punto un+1
si può notare come l'equazione del predittore è un metodo di eulero in
avanti mentre l'equazione del correttore risulta nella sua applicazione
simile al metodo dei trapezi per questo motivo il metodo di heun è noto
anche come metodo di eulero migliorato o metodo dei trapezi esplicito
possiamo vedere sulla slide il tableau di Butcher associato al metodo di
Heun; si può notare come la somma delle due componenti del vettore bi sia 1,
quindi possiamo concludere che il metodo di Heun è consistente

SLIDE 2

Procediamo ora a vedere graficamente come funziona questo metodo e come
funziona in generale un metodo di Runge-Kutta.
Partiamo da un problema di Cauchy di cui abbiamo anche la soluzione che
servirà per essere confrontata con la soluzione fornita dal metodo di
Heun per valutarne l'efficacia e il funzionamento

SLIDE 3

Partiamo dal punto Un fornito dalla condizione al contorno del problema.
Calcoliamo il valore della funzione f nel punto (Tn, Un), ricordando che
la funzione f rappresenta la derivata alla soluzione nel punto in cui viene
valutata, in questo caso il suo valore è evidenziato nel grafico dal
coefficiente angolare della retta rossa.

SLIDE 4

Usando l'equazione del predittore, che è un semplice metodo di Eulero
in avanti, stimiamo il punto successivo Un+1. Si può notare come
il valore calcolato presenta un notevole scostamento rispetto alla soluzione
corretta.

SLIDE 5

Per migliorare la nostra soluzione procediamo valutando la funzione f in
(Tn+1, Un+1), il suo valore è rappresentato dal coefficiente angolare
della retta blu.

SLIDE 6

L'equazione del correttore quindi utilizza la retta rossa e quella blu per
calcolare una terza retta con un coefficiente angolare pari alla media dei
coefficienti angolari delle due rette, ottenendo così la retta gialla.
Usando poi lo stesso passo di integrazione h e il coefficiente angolare
appena calcolato restituisce un nuovo punto Un+1. Si può vedere chiaramente
dal grafico come il punto così calcolato presenti un errore molto inferiore
rispetto al valore ottenuto dal metodo di Eulero in avanti.
Quindi quando diciamo che il metodo di Runge-Kutta sfrutta diverse
valutazioni della funzione f, questo cosa significa praticamente?
Significa fare quello che abbiamo fatto ora, ovvero utilizzare diversi
valori della funzione f calcolati in punti strategici e di questi valori
ne faccio una combinazione lineare usando i coefficienti forniti dal
tableau di Butcher per calcolare la pendenza della retta che mi porta
al punto successivo.

SLIDE 7

Facciamo ora un confronto fra il metodo di Heun e i metodi visti
in precedenza. Il metodo di Heun essendo un metodo del secondo ordine
ha un errore di troncamento globale che cresce come un o piccolo di h^2, a
differenza del metodo di Eulero in avanti, che essendo un metodo del primo
ordine, ha un errore globale di troncamento pari ad un o piccolo di h.
Il metodo di Heun risulta più preciso ed il suo errore scala il
quadrato di h, quindi se dimezzo h l'errore si riduce ad un quarto, di
contro nel metodo di eulero se dimezzo il passo l'errore si dimezza.
Il vantaggio introdotto dal metodo di Heun rispetto al metodo dei trapezi,
anch’esso del secondo ordine quindi con lo stesso errore, è il fatto che
il metodo di Heun, essendo esplicito risulta più facile da implementare.
Bisogna però ricordare come il metodo dei Trapezi essendo implicito è più
stabile del metodo di heun, perchè presenta una regione di assoluta
stabilità più estesa di quella di un metodo RK2 come il metodo di Heun,
come si può vedere dai grafici.

SLIDE 8

Possiamo vedere il metodo di Heun risolve l’equazione dell’oscillatore
di Van der Pol. L’ordine di grandezza dell’errore introdotto è 10^-4,
usando invece il metodo di Eulero con lo stesso passo di integrazione
l’ordine di grandezza è  10^-1; otteniamo quindi una accuratezza molto
maggiore limitandoci a raddoppiare il costo computazionale.

ZACK

SLIDE: POSSIAMO MIGLIORARE?
Dopo aver visto i metodi RK, proponiamo un ulteriore miglioramento

Fin ora abbiamo visto che a parità di numero di passi possiamo aumentare l'ordine di accuratezza
aumentando l'ordine del metodo
oppure a parità di ordine possiamo migliorare l'accuratezza aumentando il numero di passi

Ma essere costretti a dover scegliere a priori un numero fisso di passi equispaziati
rappresenta ancora una notevole limitazione
Quello che vorremmo avere, piuttosto, è un metodo in grado di scegliere autonomamente
il minimo numero di passi necessario
e nei punti giusti
per stimare una soluzione più corretta possibile

perchè se da un lato vogliamo che il passo sia sufficientemente piccolo da soddisfare una data tolleranza,
dall’altra vogliamo che il passo sia sufficientemente largo
da evitare lavoro computazionale non necessario.

Per avere quindi un metodo a passo adattivo è necessario che il metodo stesso possa
passo per passo
stimare quanto sia l'errore che sta commettendo
e in base a questa stima
adattare di conseguenza il passo

Questi metodi a passo adattivo derivanti da RUNGE-KUTTA sono detti metodi EMBEDDED o INTEGRATI
che poi sono quelli utilizzati nello specifico da MATLAB nelle funzioni ODE

SLIDE: EMBEDDED - TEST

Ad esempio risolvendo l'oscillatore con ODE23 di MATLAB
possiamo vedere dai marker e dal grafico in figura a sinistra come il passo non sia costante
e l'errore sia sempre tenuto sotto una certa tolleranza minima, in questo caso 10 ALLA -4

è importante notare che gli errori che abbiamo visto precendentemente negli esempi di van der pol
siano stati calcolati in base ad una soluzione analitica esatta in nostro possesso,
Questa cosa però non è assolutamente valida in generale,
nella maggior parte delle equazuioni differenziali non è detto esista una soluzione analitica
scrivibile in modo esplicito, o in forma chiusa.

Quindi ora lascio la parola a Samuele che spiegherà che strategia usano i metodi
EMBEDDED per ricavare una stima dell'errore

SAMU

METODI EMBEDDED

SSLIDE 1
Una particolare proprietà dei metodi di runge kutta è quella che alcuni di essi possono condividere lo stesso tableau di Butcher, in particolare gli stessi coefficienti aij e ci, mentre differenti coefficienti bi. Queste coppie di metodi runge kutta vengono definite embedded, ossia integrate.
Il vantaggio principale di questa coppia embedded è che, ad un determinato passo tn di integrazione, è possibile sia conoscere oltre la soluzione numerica a quel passo, anche una stima dell’errore locale.
Come anticipato precedentemnte è importante notare che negli esempi precedenti noi avevamo a disposizione la soluzione analitica esatta del problema di van der pol e di conseguenza l'effettivo errore commesso dal metodo numerico, mentre in generale non è facile ottenerla o addirittura non è possibile ottenerla.
Condividendo lo stesso Tableau di Butcher, i due metodi richiedono le stesse valutazioni funzionali Ki e quindi il costo computazionale è identico a quello del calcolo di un’unica soluzione data da uno solo dei 2 metodi: la seconda approssimazione è praticamente gratuita.
Quindi, dei due metodi, uno svolge un ruolo primario, in quanto lo stimatore dell’errore approssima il suo errore di troncamento locale e la soluzione da esso prodotta è quella che viene accettata ad ogni passo; l’altro metodo, solitamente con ordine di convergenza maggiore, invece è soltanto funzionale a stimare l’errore.
In base alla stima dell’errore, si può quindi valutare se aumentare o diminuire l’ampiezza dell’intervallo di integrazione per ottenere una soluzione con un’accuratezza desiderata.
SLIDE 2
Ecco il tableau di una generica coppia embedded, come si può notare i due metodi condividono gli stessi coefficienti aij e ci mentre diversi coefficienti bi. Le approssimazioni numeriche sono u_n e u_n cappello di ordine p e p cappello, abbiamo diversi coefficienti bi ma uguali coefficienti Ki.
Alcuni esempi di metodi embedded sono:
*Bogacki-Shampine 3(2), utilizzata in matlab nella funzione ode23.
*Dormand-Prince 5(4), utilizzata in matlab nella funzione ode45.

AUTOMATIC STEP SIZE CONTROL
SLIDE 1
Come anticipato in precedenza, la stima dell’errore locale ci permette di rendere il passo adattivo.
Quindi, come implementare un codice\algoritmo che renda il passo adattivo, diminuendo il costo computazionale, ma che comunque garantisca una tolleranza dell’errore locale scelta a priori?
Si parta ovviamente dalla scelta di un passo iniziale h, il programma computa le 2 approssimazioni numeriche della soluzione u_n e u_n cappello, calcolate dai 2 metodi RK embedded. La differenza tra le approssimazioni dà una buona stima dell’errore locale. E ovviamente questa stima, ossia il modulo della differenza delle 2 soluzioni della coppia embedded, deve essere minore uguale della tolleranza prescelta.
Come si può vedere, la tolleranza può essere formata da un termine di errore assoluto rappresentato dal fattore Atol e uno relativo Rtol che invece individua l’errore relativo tra le 2 computazioni,  tra il passo precedente e quello attuale.
SLIDE 2
Prendiamo però come errore locale locale effettivo la norma 2 del rapporto tra la differenza delle 2 soluzioni numeriche all’iesimo passo e la tolleranza imposta.
Per rispettare la condizione della slide precedente vogliamo che l’errore sia paragonabile a 1. L’errore locale si può vedere come una costante C moltiplicata per una potenza q+1 del passo, dove q è il minor ordine tra i 2 della coppia embedded, e inoltre noi vogliamo che questo errore sia uguale a 1 per trovare il passo ottimale: infatti si ha C moltiplicata per una potenza q+1  del passo ottimale sia comparabile a 1. Unendo le 2 formule, Si arriva alla formula del passo ottimale che è uguale al passo iniziale moltiplicato per il reciproco dell’errore elevato a 1/(q+1).
Se l’errore se minore uguale a 1, la tolleranza è rispettata e la soluzione dell’iesimo passo è accettata. Si procede con il calcolo del nuovo passo hnew e si calcolo la soluzione del nuovo step. Se la condizione non è verificata, la soluzione non viene accettata e si ripete il calcolo con il nuovo passo hnew.
Per dare robustezza all’algoritmo, vengono introdotti fattori di sicurezza che permettono una maggiore possibilità che la condizione della tolleranza sia soddisfatta, e quindi non si continui a ripetere uno step aumentando il costo computazionale,  e inoltre non si vuole che il passo cambi bruscamente per ovvi motivi di precisione.


ROSE

METODO BOGACKI-SHAMPINE
SLIDE 1
Per concludere vediamo un esempio di metodo embedded.

Il metodo Bogacki-Shampine è, appunto, un metodo per la soluzione numerica di equazioni differenziali ordinarie.
È un metodo Runge-Kutta di ordine 3 con 4 fasi con la proprietà First Same As Last (FSAL), che consiste nel porre il valore della
funzione al termine di un passaggio corretto, uguale al valore della funzione inziale nel passaggio successivo,
in modo che utilizza circa tre valutazioni di funzione per passaggio.
Si tratta di un metodo embedded 3(2), dove 3 rappresenta l’ordine p e 2 l’ordine p^,
che può essere quindi utilizzato per implementare la dimensione del passo adattiva.
Questo metodo è implementato nella funzione ode23 presente in Matlab e il suo tableau di Butcher è il seguente:

SLIDE 2
L’obiettivo e di calcolare una soluzione approssimata (un+1 in tn+1 = tn + h) che è d’accordo con la soluzione reale (u(tn+1)) entro la tolleranza specificata.

Un passaggio del metodo Bogacki-Shampine è dato dalle seguenti equazioni:

dove un indica la soluzione numerica al momento tn,  hn è la dimensione del passo, definita da
hn = tn+1 – tn ed e_(n+1) è la stima dell’errore i cui coefficienti  derivano dalla differenza tra la formula del terzo ordine
utilizzata per il calcolo di  u_(n+1) e la formula indipendente del secondo ordine u^n+1 che coinvolge gli stessi valori di funzione,
anche se il risultato del secondo ordine non viene effettivamente calcolato perché il suo valore non è necessario.
Vediamo che nella formulazione della stima dell’errore compare un termine K4 che viene calcolato a costo nullo poiché verrà poi utilizzato come primo termine k nell’iterazione successiva.
Da qui vediamo quindi il vantaggio dei metodi embedded, che permettono di avere gratis la stima dell’errore.

Tutti i solutori in seguito forniscono un interpolante in grado di generare valori approssimativi della soluzione all'equazione differenziale con l'accuratezza desiderata in qualsiasi punto dell'intervallo senza richiedere un'ulteriore valutazione della funzione che definisce l'ode.
Con questo esempio si conclude la presentazione dei metodi di runge-kutta per la soluzione delle equazioni differenziali ordinarie.
